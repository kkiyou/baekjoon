# 이석원은 조규현과 백승환에게 상대편 마린(류재명)의 위치를 계산하라는 명령을 내렸다. 
# 조규현과 백승환은 각각 자신의 터렛 위치에서 현재 적까지의 거리를 계산했다.
# 조규현의 좌표 (x1, y1)와 백승환의 좌표 (x2, y2)가 주어지고, 
# 조규현이 계산한 류재명과의 거리 r1과 백승환이 계산한 류재명과의 거리 r2가 주어졌을 때, 
# 류재명이 있을 수 있는 좌표의 수를 출력하는 프로그램을 작성하시오.
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 
# 각 테스트 케이스는 다음과 같이 이루어져 있다.
# 한 줄에 x1, y1, r1, x2, y2, r2가 주어진다. 
# x1, y1, x2, y2는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 정수이고, 
# r1, r2는 10,000보다 작거나 같은 자연수이다.
# 각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다. 
# 만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.

# 두 점 사이의 거리(len(두 점))와 타겟과의 거리를 비교
# 1. 두 원이 동일한지 확인
    # (x1, y1) == (x2, y2) & r1 == r2 => -1
# 2. 원이 내접하는지 확인
    # dots_len + min(r1, r2) >=< max(r1, r2)
# 3. 원이 외접하는지 확인
    # dots_len >=< (r1 + r2)

def find_target(x1, y1, r1, x2, y2, r2):
    dots_len = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if (x1 == x2) & (y1 == y2) & (r1 == r2):
        return -1
    elif dots_len + min(r1, r2) < max(r1, r2):
        return 0
    elif dots_len + min(r1, r2) == max(r1, r2):
        return 1
    else: # dots_len + min(r1, r2) > max(r1, r2):
        if dots_len < (r1 + r2):
            return 2
        elif dots_len == (r1 + r2):
            return 1
    return 0

for _ in range(int(input())):
    x1, y1, r1, x2, y2, r2 = map(int, input().split(' '))
    print(find_target(x1, y1, r1, x2, y2, r2))